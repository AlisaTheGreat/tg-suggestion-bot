import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart
from dotenv import load_dotenv
from aiogram.client.default import DefaultBotProperties

load_dotenv()

ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID"))
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

user_message_map = {}
text_buffer = {}
media_buffer = {}

AUTO_HASHTAGS = "#—Ç—Ñ #team_fortress2"
BASE_SIGNATURE = "@TwoFortKitchen\n‚û°Ô∏è <a href='https://t.me/kitchen_2fort_bot'>–ü—Ä–µ–¥–ª–æ–∂–∫–∞</a>"

def format_username(user: types.User) -> str:
    name = user.full_name or "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π"
    profile = f"<a href='tg://user?id={user.id}'>{name}</a>"
    return f"üë§ {profile}"

def get_admin_keyboard(user_id: int, msg_id: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ", callback_data=f"approve:{msg_id}"),
            InlineKeyboardButton(text="üóë –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline:{msg_id}:{user_id}")
        ],
        [
            InlineKeyboardButton(text="üë§", url=f"tg://user?id={user_id}")
        ]
    ])

@dp.message(CommandStart())
async def start(message: types.Message):
    greeting = "–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω—ã! –Ø ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∫–∞ –∫–∞–Ω–∞–ª–∞ –ö—É—Ö–Ω–∏ –¢—É—Ñ–æ—Ä—Ç–∞. –ë–æ—Ç–∞ —Å–¥–µ–ª–∞–ª–∞ –ê–ª–∏—Å–∞." if message.chat.id == ADMIN_CHAT_ID else (
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–∫–∞ –∫–∞–Ω–∞–ª–∞ <b>–ö—É—Ö–Ω–∏ –¢—É—Ñ–æ—Ä—Ç–∞</b>.\n\n–û—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞ ‚Äî –∏ –æ–Ω–æ –ø–æ–ø–∞–¥—ë—Ç –∫ –∞–¥–º–∏–Ω–∞–º –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–¥–µ—é!"
    )
    await message.answer(greeting, parse_mode=ParseMode.HTML)

@dp.message()
async def handle_suggestion(message: types.Message):
    if message.chat.type != "private":
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –¥–æ –ø–µ—Ä–µ—Å—ã–ª–∫–∏
    original = message
    text = original.text or original.caption or ""

    forwarded = await message.copy_to(ADMIN_CHAT_ID)
    user_tag = format_username(original.from_user)
    kb = get_admin_keyboard(original.from_user.id, forwarded.message_id)

    user_message_map[forwarded.message_id] = original.from_user.id
    text_buffer[forwarded.message_id] = text
    media_buffer[forwarded.message_id] = original

    await bot.send_message(
        ADMIN_CHAT_ID,
        user_tag,
        reply_to_message_id=forwarded.message_id,
        reply_markup=kb
    )
    await message.reply("–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º.")

@dp.callback_query(lambda c: c.data.startswith("approve:"))
async def approve_post(callback: types.CallbackQuery):
    msg_id = int(callback.data.split(":")[1])
    user_id = user_message_map.get(msg_id)
    text = text_buffer.get(msg_id)
    original = media_buffer.get(msg_id)

    if not user_id or not original:
        await callback.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç –∏–ª–∏ –∞–≤—Ç–æ—Ä.", show_alert=True)
        return

    user = await bot.get_chat(user_id)

    # üë§ –¢–æ–ª—å–∫–æ –∏–º—è Telegram-–∞–∫–∫–∞—É–Ω—Ç–∞ (–Ω–µ username –∏ –Ω–µ —Å—Å—ã–ª–∫–∞)
    name = user.full_name or ""
    author_line = f"üë§ {name}" if name.strip() else ""

    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç/–ø–æ–¥–ø–∏—Å—å
    caption = f"{text.strip()}"
    if author_line:
        caption += f"\n\n{author_line}"
    caption += f"\n\n{AUTO_HASHTAGS}\n\n{BASE_SIGNATURE}"

    try:
        if original.photo:
            await bot.send_photo(CHANNEL_ID, original.photo[-1].file_id, caption=caption)
        elif original.video:
            await bot.send_video(CHANNEL_ID, original.video.file_id, caption=caption)
        elif original.animation:
            await bot.send_animation(CHANNEL_ID, original.animation.file_id, caption=caption)
        else:
            await bot.send_message(CHANNEL_ID, caption)
    except Exception as e:
        await callback.message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        return

    await callback.message.edit_text("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")
    await callback.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª.")
    await bot.send_message(user_id, "–í–∞—à–∞ –ø—Ä–µ–¥–ª–æ–∂–∫–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ –ö—É—Ö–Ω–∏ –¢—É—Ñ–æ—Ä—Ç–∞. –°–ø–∞—Å–∏–±–æ!")

@dp.callback_query(lambda c: c.data.startswith("decline:"))
async def decline_simple(callback: types.CallbackQuery):
    msg_id, user_id = map(int, callback.data.split(":")[1:])
    await callback.message.edit_text("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
    await callback.answer("–ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
    await bot.send_message(user_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–µ–¥–ª–æ–∂–∫–∞ –Ω–µ –ø–æ–¥–æ—à–ª–∞, –Ω–æ —Å–ø–∞—Å–∏–±–æ –∑–∞ –∏–¥–µ—é üíõ")

async def main():
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())
